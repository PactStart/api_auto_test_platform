/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 112821.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 4.0], [5.2, 4.0], [5.3, 4.0], [5.4, 5.0], [5.5, 5.0], [5.6, 6.0], [5.7, 6.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 8.0], [6.2, 8.0], [6.3, 9.0], [6.4, 9.0], [6.5, 9.0], [6.6, 10.0], [6.7, 10.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 12.0], [7.3, 12.0], [7.4, 12.0], [7.5, 13.0], [7.6, 13.0], [7.7, 13.0], [7.8, 13.0], [7.9, 13.0], [8.0, 14.0], [8.1, 14.0], [8.2, 14.0], [8.3, 14.0], [8.4, 15.0], [8.5, 15.0], [8.6, 15.0], [8.7, 15.0], [8.8, 16.0], [8.9, 16.0], [9.0, 16.0], [9.1, 16.0], [9.2, 17.0], [9.3, 17.0], [9.4, 17.0], [9.5, 17.0], [9.6, 18.0], [9.7, 18.0], [9.8, 18.0], [9.9, 18.0], [10.0, 18.0], [10.1, 19.0], [10.2, 19.0], [10.3, 19.0], [10.4, 19.0], [10.5, 19.0], [10.6, 19.0], [10.7, 19.0], [10.8, 20.0], [10.9, 20.0], [11.0, 20.0], [11.1, 20.0], [11.2, 20.0], [11.3, 20.0], [11.4, 21.0], [11.5, 21.0], [11.6, 21.0], [11.7, 21.0], [11.8, 21.0], [11.9, 22.0], [12.0, 22.0], [12.1, 22.0], [12.2, 22.0], [12.3, 22.0], [12.4, 22.0], [12.5, 23.0], [12.6, 23.0], [12.7, 23.0], [12.8, 23.0], [12.9, 23.0], [13.0, 24.0], [13.1, 24.0], [13.2, 24.0], [13.3, 24.0], [13.4, 24.0], [13.5, 24.0], [13.6, 25.0], [13.7, 25.0], [13.8, 25.0], [13.9, 25.0], [14.0, 25.0], [14.1, 26.0], [14.2, 26.0], [14.3, 26.0], [14.4, 26.0], [14.5, 26.0], [14.6, 27.0], [14.7, 27.0], [14.8, 27.0], [14.9, 27.0], [15.0, 27.0], [15.1, 27.0], [15.2, 28.0], [15.3, 28.0], [15.4, 28.0], [15.5, 28.0], [15.6, 28.0], [15.7, 28.0], [15.8, 29.0], [15.9, 29.0], [16.0, 29.0], [16.1, 29.0], [16.2, 29.0], [16.3, 29.0], [16.4, 30.0], [16.5, 30.0], [16.6, 30.0], [16.7, 30.0], [16.8, 30.0], [16.9, 30.0], [17.0, 31.0], [17.1, 31.0], [17.2, 31.0], [17.3, 31.0], [17.4, 31.0], [17.5, 31.0], [17.6, 31.0], [17.7, 31.0], [17.8, 32.0], [17.9, 32.0], [18.0, 32.0], [18.1, 32.0], [18.2, 32.0], [18.3, 32.0], [18.4, 33.0], [18.5, 33.0], [18.6, 33.0], [18.7, 33.0], [18.8, 33.0], [18.9, 33.0], [19.0, 34.0], [19.1, 34.0], [19.2, 34.0], [19.3, 34.0], [19.4, 35.0], [19.5, 35.0], [19.6, 35.0], [19.7, 35.0], [19.8, 35.0], [19.9, 35.0], [20.0, 36.0], [20.1, 36.0], [20.2, 36.0], [20.3, 36.0], [20.4, 36.0], [20.5, 37.0], [20.6, 37.0], [20.7, 37.0], [20.8, 37.0], [20.9, 37.0], [21.0, 38.0], [21.1, 38.0], [21.2, 38.0], [21.3, 38.0], [21.4, 39.0], [21.5, 39.0], [21.6, 39.0], [21.7, 39.0], [21.8, 39.0], [21.9, 40.0], [22.0, 40.0], [22.1, 40.0], [22.2, 40.0], [22.3, 41.0], [22.4, 41.0], [22.5, 41.0], [22.6, 41.0], [22.7, 42.0], [22.8, 42.0], [22.9, 42.0], [23.0, 43.0], [23.1, 43.0], [23.2, 43.0], [23.3, 43.0], [23.4, 44.0], [23.5, 44.0], [23.6, 44.0], [23.7, 44.0], [23.8, 45.0], [23.9, 45.0], [24.0, 45.0], [24.1, 46.0], [24.2, 46.0], [24.3, 46.0], [24.4, 46.0], [24.5, 47.0], [24.6, 47.0], [24.7, 47.0], [24.8, 48.0], [24.9, 48.0], [25.0, 48.0], [25.1, 49.0], [25.2, 49.0], [25.3, 49.0], [25.4, 49.0], [25.5, 50.0], [25.6, 50.0], [25.7, 50.0], [25.8, 50.0], [25.9, 51.0], [26.0, 51.0], [26.1, 51.0], [26.2, 51.0], [26.3, 52.0], [26.4, 52.0], [26.5, 52.0], [26.6, 53.0], [26.7, 53.0], [26.8, 53.0], [26.9, 53.0], [27.0, 53.0], [27.1, 54.0], [27.2, 54.0], [27.3, 54.0], [27.4, 55.0], [27.5, 55.0], [27.6, 55.0], [27.7, 55.0], [27.8, 56.0], [27.9, 56.0], [28.0, 56.0], [28.1, 56.0], [28.2, 57.0], [28.3, 57.0], [28.4, 57.0], [28.5, 57.0], [28.6, 58.0], [28.7, 58.0], [28.8, 58.0], [28.9, 58.0], [29.0, 59.0], [29.1, 59.0], [29.2, 59.0], [29.3, 60.0], [29.4, 60.0], [29.5, 60.0], [29.6, 60.0], [29.7, 61.0], [29.8, 61.0], [29.9, 61.0], [30.0, 61.0], [30.1, 62.0], [30.2, 62.0], [30.3, 62.0], [30.4, 62.0], [30.5, 63.0], [30.6, 63.0], [30.7, 63.0], [30.8, 63.0], [30.9, 64.0], [31.0, 64.0], [31.1, 64.0], [31.2, 64.0], [31.3, 64.0], [31.4, 65.0], [31.5, 65.0], [31.6, 65.0], [31.7, 65.0], [31.8, 66.0], [31.9, 66.0], [32.0, 66.0], [32.1, 66.0], [32.2, 67.0], [32.3, 67.0], [32.4, 67.0], [32.5, 67.0], [32.6, 68.0], [32.7, 68.0], [32.8, 68.0], [32.9, 68.0], [33.0, 68.0], [33.1, 69.0], [33.2, 69.0], [33.3, 69.0], [33.4, 69.0], [33.5, 70.0], [33.6, 70.0], [33.7, 70.0], [33.8, 70.0], [33.9, 71.0], [34.0, 71.0], [34.1, 71.0], [34.2, 71.0], [34.3, 71.0], [34.4, 71.0], [34.5, 72.0], [34.6, 72.0], [34.7, 72.0], [34.8, 72.0], [34.9, 72.0], [35.0, 73.0], [35.1, 73.0], [35.2, 73.0], [35.3, 73.0], [35.4, 74.0], [35.5, 74.0], [35.6, 74.0], [35.7, 74.0], [35.8, 74.0], [35.9, 75.0], [36.0, 75.0], [36.1, 75.0], [36.2, 75.0], [36.3, 76.0], [36.4, 76.0], [36.5, 76.0], [36.6, 76.0], [36.7, 76.0], [36.8, 76.0], [36.9, 77.0], [37.0, 77.0], [37.1, 77.0], [37.2, 77.0], [37.3, 77.0], [37.4, 78.0], [37.5, 78.0], [37.6, 78.0], [37.7, 78.0], [37.8, 78.0], [37.9, 79.0], [38.0, 79.0], [38.1, 79.0], [38.2, 79.0], [38.3, 79.0], [38.4, 80.0], [38.5, 80.0], [38.6, 80.0], [38.7, 80.0], [38.8, 80.0], [38.9, 80.0], [39.0, 81.0], [39.1, 81.0], [39.2, 81.0], [39.3, 81.0], [39.4, 81.0], [39.5, 82.0], [39.6, 82.0], [39.7, 82.0], [39.8, 82.0], [39.9, 82.0], [40.0, 82.0], [40.1, 83.0], [40.2, 83.0], [40.3, 83.0], [40.4, 83.0], [40.5, 83.0], [40.6, 83.0], [40.7, 84.0], [40.8, 84.0], [40.9, 84.0], [41.0, 84.0], [41.1, 84.0], [41.2, 84.0], [41.3, 85.0], [41.4, 85.0], [41.5, 85.0], [41.6, 85.0], [41.7, 85.0], [41.8, 86.0], [41.9, 86.0], [42.0, 86.0], [42.1, 86.0], [42.2, 86.0], [42.3, 86.0], [42.4, 86.0], [42.5, 87.0], [42.6, 87.0], [42.7, 87.0], [42.8, 87.0], [42.9, 87.0], [43.0, 87.0], [43.1, 87.0], [43.2, 88.0], [43.3, 88.0], [43.4, 88.0], [43.5, 88.0], [43.6, 88.0], [43.7, 88.0], [43.8, 89.0], [43.9, 89.0], [44.0, 89.0], [44.1, 89.0], [44.2, 89.0], [44.3, 89.0], [44.4, 89.0], [44.5, 90.0], [44.6, 90.0], [44.7, 90.0], [44.8, 90.0], [44.9, 90.0], [45.0, 90.0], [45.1, 90.0], [45.2, 91.0], [45.3, 91.0], [45.4, 91.0], [45.5, 91.0], [45.6, 91.0], [45.7, 91.0], [45.8, 92.0], [45.9, 92.0], [46.0, 92.0], [46.1, 92.0], [46.2, 92.0], [46.3, 92.0], [46.4, 93.0], [46.5, 93.0], [46.6, 93.0], [46.7, 93.0], [46.8, 93.0], [46.9, 93.0], [47.0, 94.0], [47.1, 94.0], [47.2, 94.0], [47.3, 94.0], [47.4, 94.0], [47.5, 94.0], [47.6, 94.0], [47.7, 95.0], [47.8, 95.0], [47.9, 95.0], [48.0, 95.0], [48.1, 95.0], [48.2, 96.0], [48.3, 96.0], [48.4, 96.0], [48.5, 96.0], [48.6, 96.0], [48.7, 96.0], [48.8, 97.0], [48.9, 97.0], [49.0, 97.0], [49.1, 97.0], [49.2, 97.0], [49.3, 98.0], [49.4, 98.0], [49.5, 98.0], [49.6, 98.0], [49.7, 98.0], [49.8, 99.0], [49.9, 99.0], [50.0, 99.0], [50.1, 99.0], [50.2, 100.0], [50.3, 100.0], [50.4, 100.0], [50.5, 100.0], [50.6, 100.0], [50.7, 101.0], [50.8, 101.0], [50.9, 101.0], [51.0, 101.0], [51.1, 102.0], [51.2, 102.0], [51.3, 102.0], [51.4, 102.0], [51.5, 102.0], [51.6, 103.0], [51.7, 103.0], [51.8, 103.0], [51.9, 103.0], [52.0, 104.0], [52.1, 104.0], [52.2, 104.0], [52.3, 105.0], [52.4, 105.0], [52.5, 105.0], [52.6, 105.0], [52.7, 106.0], [52.8, 106.0], [52.9, 106.0], [53.0, 106.0], [53.1, 107.0], [53.2, 107.0], [53.3, 107.0], [53.4, 107.0], [53.5, 108.0], [53.6, 108.0], [53.7, 108.0], [53.8, 108.0], [53.9, 109.0], [54.0, 109.0], [54.1, 109.0], [54.2, 110.0], [54.3, 110.0], [54.4, 110.0], [54.5, 111.0], [54.6, 111.0], [54.7, 111.0], [54.8, 112.0], [54.9, 112.0], [55.0, 112.0], [55.1, 113.0], [55.2, 113.0], [55.3, 113.0], [55.4, 114.0], [55.5, 114.0], [55.6, 114.0], [55.7, 115.0], [55.8, 115.0], [55.9, 116.0], [56.0, 116.0], [56.1, 116.0], [56.2, 117.0], [56.3, 117.0], [56.4, 118.0], [56.5, 118.0], [56.6, 118.0], [56.7, 119.0], [56.8, 119.0], [56.9, 119.0], [57.0, 120.0], [57.1, 120.0], [57.2, 121.0], [57.3, 121.0], [57.4, 121.0], [57.5, 122.0], [57.6, 122.0], [57.7, 122.0], [57.8, 123.0], [57.9, 123.0], [58.0, 124.0], [58.1, 124.0], [58.2, 125.0], [58.3, 125.0], [58.4, 125.0], [58.5, 126.0], [58.6, 126.0], [58.7, 127.0], [58.8, 127.0], [58.9, 127.0], [59.0, 128.0], [59.1, 128.0], [59.2, 128.0], [59.3, 129.0], [59.4, 129.0], [59.5, 129.0], [59.6, 130.0], [59.7, 130.0], [59.8, 131.0], [59.9, 131.0], [60.0, 131.0], [60.1, 132.0], [60.2, 132.0], [60.3, 132.0], [60.4, 133.0], [60.5, 133.0], [60.6, 134.0], [60.7, 134.0], [60.8, 134.0], [60.9, 135.0], [61.0, 135.0], [61.1, 136.0], [61.2, 136.0], [61.3, 136.0], [61.4, 137.0], [61.5, 137.0], [61.6, 137.0], [61.7, 138.0], [61.8, 138.0], [61.9, 139.0], [62.0, 139.0], [62.1, 139.0], [62.2, 140.0], [62.3, 140.0], [62.4, 140.0], [62.5, 141.0], [62.6, 141.0], [62.7, 142.0], [62.8, 142.0], [62.9, 142.0], [63.0, 143.0], [63.1, 143.0], [63.2, 144.0], [63.3, 144.0], [63.4, 145.0], [63.5, 145.0], [63.6, 145.0], [63.7, 146.0], [63.8, 146.0], [63.9, 147.0], [64.0, 147.0], [64.1, 148.0], [64.2, 148.0], [64.3, 148.0], [64.4, 149.0], [64.5, 149.0], [64.6, 150.0], [64.7, 150.0], [64.8, 151.0], [64.9, 151.0], [65.0, 151.0], [65.1, 151.0], [65.2, 152.0], [65.3, 152.0], [65.4, 153.0], [65.5, 153.0], [65.6, 154.0], [65.7, 154.0], [65.8, 154.0], [65.9, 155.0], [66.0, 156.0], [66.1, 156.0], [66.2, 157.0], [66.3, 157.0], [66.4, 158.0], [66.5, 158.0], [66.6, 159.0], [66.7, 160.0], [66.8, 160.0], [66.9, 160.0], [67.0, 161.0], [67.1, 162.0], [67.2, 162.0], [67.3, 163.0], [67.4, 163.0], [67.5, 164.0], [67.6, 165.0], [67.7, 166.0], [67.8, 166.0], [67.9, 167.0], [68.0, 168.0], [68.1, 168.0], [68.2, 169.0], [68.3, 170.0], [68.4, 170.0], [68.5, 171.0], [68.6, 172.0], [68.7, 173.0], [68.8, 174.0], [68.9, 174.0], [69.0, 175.0], [69.1, 176.0], [69.2, 176.0], [69.3, 177.0], [69.4, 178.0], [69.5, 178.0], [69.6, 179.0], [69.7, 179.0], [69.8, 180.0], [69.9, 180.0], [70.0, 181.0], [70.1, 181.0], [70.2, 182.0], [70.3, 183.0], [70.4, 184.0], [70.5, 184.0], [70.6, 185.0], [70.7, 185.0], [70.8, 186.0], [70.9, 187.0], [71.0, 188.0], [71.1, 188.0], [71.2, 189.0], [71.3, 190.0], [71.4, 191.0], [71.5, 192.0], [71.6, 192.0], [71.7, 193.0], [71.8, 194.0], [71.9, 195.0], [72.0, 196.0], [72.1, 197.0], [72.2, 197.0], [72.3, 198.0], [72.4, 199.0], [72.5, 200.0], [72.6, 201.0], [72.7, 202.0], [72.8, 203.0], [72.9, 204.0], [73.0, 204.0], [73.1, 205.0], [73.2, 206.0], [73.3, 207.0], [73.4, 208.0], [73.5, 209.0], [73.6, 210.0], [73.7, 210.0], [73.8, 211.0], [73.9, 212.0], [74.0, 213.0], [74.1, 214.0], [74.2, 215.0], [74.3, 216.0], [74.4, 216.0], [74.5, 217.0], [74.6, 219.0], [74.7, 220.0], [74.8, 221.0], [74.9, 222.0], [75.0, 223.0], [75.1, 223.0], [75.2, 224.0], [75.3, 225.0], [75.4, 226.0], [75.5, 227.0], [75.6, 227.0], [75.7, 229.0], [75.8, 230.0], [75.9, 230.0], [76.0, 231.0], [76.1, 232.0], [76.2, 233.0], [76.3, 234.0], [76.4, 235.0], [76.5, 236.0], [76.6, 237.0], [76.7, 238.0], [76.8, 239.0], [76.9, 240.0], [77.0, 240.0], [77.1, 241.0], [77.2, 242.0], [77.3, 243.0], [77.4, 244.0], [77.5, 245.0], [77.6, 246.0], [77.7, 248.0], [77.8, 248.0], [77.9, 249.0], [78.0, 250.0], [78.1, 252.0], [78.2, 253.0], [78.3, 253.0], [78.4, 255.0], [78.5, 256.0], [78.6, 257.0], [78.7, 258.0], [78.8, 260.0], [78.9, 261.0], [79.0, 263.0], [79.1, 264.0], [79.2, 265.0], [79.3, 267.0], [79.4, 268.0], [79.5, 269.0], [79.6, 270.0], [79.7, 272.0], [79.8, 273.0], [79.9, 274.0], [80.0, 275.0], [80.1, 277.0], [80.2, 278.0], [80.3, 280.0], [80.4, 281.0], [80.5, 283.0], [80.6, 285.0], [80.7, 287.0], [80.8, 288.0], [80.9, 290.0], [81.0, 292.0], [81.1, 294.0], [81.2, 296.0], [81.3, 298.0], [81.4, 301.0], [81.5, 304.0], [81.6, 306.0], [81.7, 308.0], [81.8, 311.0], [81.9, 313.0], [82.0, 316.0], [82.1, 318.0], [82.2, 320.0], [82.3, 322.0], [82.4, 324.0], [82.5, 326.0], [82.6, 329.0], [82.7, 331.0], [82.8, 332.0], [82.9, 334.0], [83.0, 336.0], [83.1, 338.0], [83.2, 340.0], [83.3, 342.0], [83.4, 344.0], [83.5, 345.0], [83.6, 347.0], [83.7, 348.0], [83.8, 350.0], [83.9, 352.0], [84.0, 354.0], [84.1, 357.0], [84.2, 360.0], [84.3, 363.0], [84.4, 367.0], [84.5, 370.0], [84.6, 374.0], [84.7, 378.0], [84.8, 382.0], [84.9, 387.0], [85.0, 391.0], [85.1, 395.0], [85.2, 399.0], [85.3, 403.0], [85.4, 408.0], [85.5, 411.0], [85.6, 414.0], [85.7, 419.0], [85.8, 424.0], [85.9, 427.0], [86.0, 431.0], [86.1, 433.0], [86.2, 438.0], [86.3, 442.0], [86.4, 446.0], [86.5, 450.0], [86.6, 454.0], [86.7, 459.0], [86.8, 462.0], [86.9, 467.0], [87.0, 469.0], [87.1, 473.0], [87.2, 475.0], [87.3, 480.0], [87.4, 483.0], [87.5, 486.0], [87.6, 490.0], [87.7, 494.0], [87.8, 496.0], [87.9, 500.0], [88.0, 505.0], [88.1, 508.0], [88.2, 512.0], [88.3, 517.0], [88.4, 518.0], [88.5, 520.0], [88.6, 521.0], [88.7, 522.0], [88.8, 525.0], [88.9, 528.0], [89.0, 529.0], [89.1, 531.0], [89.2, 533.0], [89.3, 537.0], [89.4, 541.0], [89.5, 545.0], [89.6, 549.0], [89.7, 552.0], [89.8, 556.0], [89.9, 559.0], [90.0, 563.0], [90.1, 567.0], [90.2, 570.0], [90.3, 574.0], [90.4, 577.0], [90.5, 580.0], [90.6, 583.0], [90.7, 585.0], [90.8, 588.0], [90.9, 591.0], [91.0, 593.0], [91.1, 595.0], [91.2, 598.0], [91.3, 600.0], [91.4, 604.0], [91.5, 606.0], [91.6, 609.0], [91.7, 612.0], [91.8, 615.0], [91.9, 618.0], [92.0, 622.0], [92.1, 625.0], [92.2, 629.0], [92.3, 633.0], [92.4, 636.0], [92.5, 640.0], [92.6, 644.0], [92.7, 647.0], [92.8, 651.0], [92.9, 654.0], [93.0, 657.0], [93.1, 660.0], [93.2, 663.0], [93.3, 667.0], [93.4, 670.0], [93.5, 673.0], [93.6, 676.0], [93.7, 680.0], [93.8, 684.0], [93.9, 689.0], [94.0, 691.0], [94.1, 693.0], [94.2, 695.0], [94.3, 697.0], [94.4, 700.0], [94.5, 703.0], [94.6, 704.0], [94.7, 707.0], [94.8, 709.0], [94.9, 715.0], [95.0, 719.0], [95.1, 726.0], [95.2, 731.0], [95.3, 736.0], [95.4, 742.0], [95.5, 749.0], [95.6, 756.0], [95.7, 766.0], [95.8, 776.0], [95.9, 806.0], [96.0, 864.0], [96.1, 887.0], [96.2, 959.0], [96.3, 970.0], [96.4, 978.0], [96.5, 1038.0], [96.6, 1214.0], [96.7, 1291.0], [96.8, 1363.0], [96.9, 1654.0], [97.0, 1656.0], [97.1, 1657.0], [97.2, 1660.0], [97.3, 1677.0], [97.4, 1678.0], [97.5, 1735.0], [97.6, 2149.0], [97.7, 2466.0], [97.8, 2827.0], [97.9, 2828.0], [98.0, 2915.0], [98.1, 2921.0], [98.2, 3084.0], [98.3, 3095.0], [98.4, 3189.0], [98.5, 3252.0], [98.6, 3381.0], [98.7, 4069.0], [98.8, 4182.0], [98.9, 4528.0], [99.0, 4747.0], [99.1, 6121.0], [99.2, 8658.0], [99.3, 13857.0], [99.4, 16695.0], [99.5, 35220.0], [99.6, 35223.0], [99.7, 66189.0], [99.8, 67077.0], [99.9, 112810.0]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[0.0, 0.0], [0.1, 3.0], [0.2, 5.0], [0.3, 6.0], [0.4, 7.0], [0.5, 8.0], [0.6, 8.0], [0.7, 9.0], [0.8, 9.0], [0.9, 10.0], [1.0, 11.0], [1.1, 11.0], [1.2, 12.0], [1.3, 12.0], [1.4, 13.0], [1.5, 13.0], [1.6, 14.0], [1.7, 14.0], [1.8, 15.0], [1.9, 15.0], [2.0, 16.0], [2.1, 16.0], [2.2, 16.0], [2.3, 17.0], [2.4, 17.0], [2.5, 18.0], [2.6, 18.0], [2.7, 18.0], [2.8, 19.0], [2.9, 19.0], [3.0, 19.0], [3.1, 20.0], [3.2, 20.0], [3.3, 20.0], [3.4, 21.0], [3.5, 21.0], [3.6, 21.0], [3.7, 22.0], [3.8, 22.0], [3.9, 22.0], [4.0, 23.0], [4.1, 23.0], [4.2, 23.0], [4.3, 24.0], [4.4, 24.0], [4.5, 24.0], [4.6, 25.0], [4.7, 25.0], [4.8, 25.0], [4.9, 26.0], [5.0, 26.0], [5.1, 26.0], [5.2, 26.0], [5.3, 27.0], [5.4, 27.0], [5.5, 27.0], [5.6, 28.0], [5.7, 28.0], [5.8, 28.0], [5.9, 29.0], [6.0, 29.0], [6.1, 29.0], [6.2, 30.0], [6.3, 30.0], [6.4, 30.0], [6.5, 30.0], [6.6, 31.0], [6.7, 31.0], [6.8, 31.0], [6.9, 31.0], [7.0, 32.0], [7.1, 32.0], [7.2, 32.0], [7.3, 33.0], [7.4, 33.0], [7.5, 33.0], [7.6, 33.0], [7.7, 34.0], [7.8, 34.0], [7.9, 34.0], [8.0, 35.0], [8.1, 35.0], [8.2, 35.0], [8.3, 36.0], [8.4, 36.0], [8.5, 36.0], [8.6, 37.0], [8.7, 37.0], [8.8, 37.0], [8.9, 38.0], [9.0, 38.0], [9.1, 38.0], [9.2, 39.0], [9.3, 39.0], [9.4, 39.0], [9.5, 40.0], [9.6, 40.0], [9.7, 41.0], [9.8, 41.0], [9.9, 41.0], [10.0, 42.0], [10.1, 42.0], [10.2, 43.0], [10.3, 43.0], [10.4, 44.0], [10.5, 44.0], [10.6, 45.0], [10.7, 45.0], [10.8, 46.0], [10.9, 46.0], [11.0, 47.0], [11.1, 47.0], [11.2, 48.0], [11.3, 48.0], [11.4, 49.0], [11.5, 49.0], [11.6, 49.0], [11.7, 50.0], [11.8, 50.0], [11.9, 51.0], [12.0, 51.0], [12.1, 52.0], [12.2, 52.0], [12.3, 53.0], [12.4, 53.0], [12.5, 54.0], [12.6, 54.0], [12.7, 54.0], [12.8, 55.0], [12.9, 55.0], [13.0, 56.0], [13.1, 56.0], [13.2, 57.0], [13.3, 57.0], [13.4, 58.0], [13.5, 58.0], [13.6, 58.0], [13.7, 59.0], [13.8, 59.0], [13.9, 60.0], [14.0, 60.0], [14.1, 60.0], [14.2, 61.0], [14.3, 61.0], [14.4, 61.0], [14.5, 62.0], [14.6, 62.0], [14.7, 63.0], [14.8, 63.0], [14.9, 63.0], [15.0, 64.0], [15.1, 64.0], [15.2, 64.0], [15.3, 65.0], [15.4, 65.0], [15.5, 65.0], [15.6, 66.0], [15.7, 66.0], [15.8, 66.0], [15.9, 67.0], [16.0, 67.0], [16.1, 67.0], [16.2, 68.0], [16.3, 68.0], [16.4, 68.0], [16.5, 69.0], [16.6, 69.0], [16.7, 69.0], [16.8, 69.0], [16.9, 70.0], [17.0, 70.0], [17.1, 70.0], [17.2, 71.0], [17.3, 71.0], [17.4, 71.0], [17.5, 71.0], [17.6, 72.0], [17.7, 72.0], [17.8, 72.0], [17.9, 73.0], [18.0, 73.0], [18.1, 73.0], [18.2, 74.0], [18.3, 74.0], [18.4, 74.0], [18.5, 74.0], [18.6, 75.0], [18.7, 75.0], [18.8, 75.0], [18.9, 75.0], [19.0, 76.0], [19.1, 76.0], [19.2, 76.0], [19.3, 77.0], [19.4, 77.0], [19.5, 77.0], [19.6, 77.0], [19.7, 78.0], [19.8, 78.0], [19.9, 78.0], [20.0, 78.0], [20.1, 79.0], [20.2, 79.0], [20.3, 79.0], [20.4, 79.0], [20.5, 79.0], [20.6, 80.0], [20.7, 80.0], [20.8, 80.0], [20.9, 80.0], [21.0, 81.0], [21.1, 81.0], [21.2, 81.0], [21.3, 81.0], [21.4, 81.0], [21.5, 82.0], [21.6, 82.0], [21.7, 82.0], [21.8, 82.0], [21.9, 83.0], [22.0, 83.0], [22.1, 83.0], [22.2, 83.0], [22.3, 83.0], [22.4, 84.0], [22.5, 84.0], [22.6, 84.0], [22.7, 84.0], [22.8, 84.0], [22.9, 85.0], [23.0, 85.0], [23.1, 85.0], [23.2, 85.0], [23.3, 85.0], [23.4, 86.0], [23.5, 86.0], [23.6, 86.0], [23.7, 86.0], [23.8, 86.0], [23.9, 87.0], [24.0, 87.0], [24.1, 87.0], [24.2, 87.0], [24.3, 87.0], [24.4, 87.0], [24.5, 88.0], [24.6, 88.0], [24.7, 88.0], [24.8, 88.0], [24.9, 88.0], [25.0, 89.0], [25.1, 89.0], [25.2, 89.0], [25.3, 89.0], [25.4, 89.0], [25.5, 90.0], [25.6, 90.0], [25.7, 90.0], [25.8, 90.0], [25.9, 90.0], [26.0, 90.0], [26.1, 91.0], [26.2, 91.0], [26.3, 91.0], [26.4, 91.0], [26.5, 92.0], [26.6, 92.0], [26.7, 92.0], [26.8, 92.0], [26.9, 92.0], [27.0, 93.0], [27.1, 93.0], [27.2, 93.0], [27.3, 93.0], [27.4, 93.0], [27.5, 94.0], [27.6, 94.0], [27.7, 94.0], [27.8, 94.0], [27.9, 94.0], [28.0, 95.0], [28.1, 95.0], [28.2, 95.0], [28.3, 95.0], [28.4, 96.0], [28.5, 96.0], [28.6, 96.0], [28.7, 96.0], [28.8, 96.0], [28.9, 97.0], [29.0, 97.0], [29.1, 97.0], [29.2, 97.0], [29.3, 98.0], [29.4, 98.0], [29.5, 98.0], [29.6, 98.0], [29.7, 99.0], [29.8, 99.0], [29.9, 99.0], [30.0, 99.0], [30.1, 99.0], [30.2, 100.0], [30.3, 100.0], [30.4, 100.0], [30.5, 100.0], [30.6, 101.0], [30.7, 101.0], [30.8, 101.0], [30.9, 102.0], [31.0, 102.0], [31.1, 102.0], [31.2, 102.0], [31.3, 103.0], [31.4, 103.0], [31.5, 103.0], [31.6, 104.0], [31.7, 104.0], [31.8, 104.0], [31.9, 105.0], [32.0, 105.0], [32.1, 105.0], [32.2, 106.0], [32.3, 106.0], [32.4, 106.0], [32.5, 107.0], [32.6, 107.0], [32.7, 107.0], [32.8, 108.0], [32.9, 108.0], [33.0, 108.0], [33.1, 109.0], [33.2, 109.0], [33.3, 110.0], [33.4, 110.0], [33.5, 110.0], [33.6, 111.0], [33.7, 111.0], [33.8, 112.0], [33.9, 112.0], [34.0, 112.0], [34.1, 113.0], [34.2, 113.0], [34.3, 114.0], [34.4, 114.0], [34.5, 115.0], [34.6, 115.0], [34.7, 116.0], [34.8, 116.0], [34.9, 117.0], [35.0, 117.0], [35.1, 118.0], [35.2, 118.0], [35.3, 119.0], [35.4, 119.0], [35.5, 120.0], [35.6, 120.0], [35.7, 121.0], [35.8, 121.0], [35.9, 122.0], [36.0, 122.0], [36.1, 123.0], [36.2, 123.0], [36.3, 124.0], [36.4, 124.0], [36.5, 125.0], [36.6, 125.0], [36.7, 126.0], [36.8, 127.0], [36.9, 127.0], [37.0, 128.0], [37.1, 128.0], [37.2, 129.0], [37.3, 129.0], [37.4, 130.0], [37.5, 130.0], [37.6, 131.0], [37.7, 131.0], [37.8, 132.0], [37.9, 132.0], [38.0, 133.0], [38.1, 133.0], [38.2, 133.0], [38.3, 134.0], [38.4, 135.0], [38.5, 135.0], [38.6, 136.0], [38.7, 136.0], [38.8, 137.0], [38.9, 137.0], [39.0, 138.0], [39.1, 138.0], [39.2, 139.0], [39.3, 139.0], [39.4, 140.0], [39.5, 140.0], [39.6, 141.0], [39.7, 141.0], [39.8, 142.0], [39.9, 142.0], [40.0, 143.0], [40.1, 143.0], [40.2, 144.0], [40.3, 144.0], [40.4, 145.0], [40.5, 145.0], [40.6, 146.0], [40.7, 146.0], [40.8, 147.0], [40.9, 148.0], [41.0, 148.0], [41.1, 149.0], [41.2, 150.0], [41.3, 150.0], [41.4, 151.0], [41.5, 152.0], [41.6, 152.0], [41.7, 153.0], [41.8, 154.0], [41.9, 154.0], [42.0, 155.0], [42.1, 155.0], [42.2, 156.0], [42.3, 157.0], [42.4, 158.0], [42.5, 158.0], [42.6, 159.0], [42.7, 160.0], [42.8, 161.0], [42.9, 161.0], [43.0, 162.0], [43.1, 163.0], [43.2, 164.0], [43.3, 165.0], [43.4, 165.0], [43.5, 166.0], [43.6, 167.0], [43.7, 168.0], [43.8, 169.0], [43.9, 170.0], [44.0, 171.0], [44.1, 172.0], [44.2, 173.0], [44.3, 173.0], [44.4, 174.0], [44.5, 175.0], [44.6, 176.0], [44.7, 177.0], [44.8, 178.0], [44.9, 179.0], [45.0, 180.0], [45.1, 181.0], [45.2, 182.0], [45.3, 182.0], [45.4, 184.0], [45.5, 185.0], [45.6, 185.0], [45.7, 186.0], [45.8, 187.0], [45.9, 188.0], [46.0, 189.0], [46.1, 190.0], [46.2, 191.0], [46.3, 191.0], [46.4, 192.0], [46.5, 193.0], [46.6, 194.0], [46.7, 195.0], [46.8, 196.0], [46.9, 197.0], [47.0, 198.0], [47.1, 199.0], [47.2, 199.0], [47.3, 200.0], [47.4, 201.0], [47.5, 202.0], [47.6, 203.0], [47.7, 204.0], [47.8, 204.0], [47.9, 205.0], [48.0, 206.0], [48.1, 207.0], [48.2, 208.0], [48.3, 209.0], [48.4, 209.0], [48.5, 210.0], [48.6, 211.0], [48.7, 212.0], [48.8, 213.0], [48.9, 214.0], [49.0, 214.0], [49.1, 215.0], [49.2, 216.0], [49.3, 217.0], [49.4, 218.0], [49.5, 219.0], [49.6, 220.0], [49.7, 220.0], [49.8, 221.0], [49.9, 222.0], [50.0, 223.0], [50.1, 224.0], [50.2, 225.0], [50.3, 226.0], [50.4, 226.0], [50.5, 227.0], [50.6, 228.0], [50.7, 229.0], [50.8, 230.0], [50.9, 231.0], [51.0, 232.0], [51.1, 232.0], [51.2, 233.0], [51.3, 234.0], [51.4, 235.0], [51.5, 236.0], [51.6, 237.0], [51.7, 238.0], [51.8, 239.0], [51.9, 240.0], [52.0, 241.0], [52.1, 242.0], [52.2, 243.0], [52.3, 243.0], [52.4, 244.0], [52.5, 245.0], [52.6, 246.0], [52.7, 247.0], [52.8, 248.0], [52.9, 249.0], [53.0, 250.0], [53.1, 251.0], [53.2, 252.0], [53.3, 253.0], [53.4, 254.0], [53.5, 255.0], [53.6, 256.0], [53.7, 257.0], [53.8, 258.0], [53.9, 259.0], [54.0, 260.0], [54.1, 261.0], [54.2, 262.0], [54.3, 263.0], [54.4, 264.0], [54.5, 265.0], [54.6, 266.0], [54.7, 267.0], [54.8, 268.0], [54.9, 269.0], [55.0, 271.0], [55.1, 271.0], [55.2, 272.0], [55.3, 273.0], [55.4, 275.0], [55.5, 276.0], [55.6, 277.0], [55.7, 278.0], [55.8, 279.0], [55.9, 280.0], [56.0, 281.0], [56.1, 282.0], [56.2, 283.0], [56.3, 284.0], [56.4, 285.0], [56.5, 286.0], [56.6, 287.0], [56.7, 288.0], [56.8, 289.0], [56.9, 290.0], [57.0, 291.0], [57.1, 293.0], [57.2, 294.0], [57.3, 295.0], [57.4, 296.0], [57.5, 297.0], [57.6, 298.0], [57.7, 299.0], [57.8, 300.0], [57.9, 301.0], [58.0, 302.0], [58.1, 303.0], [58.2, 304.0], [58.3, 305.0], [58.4, 307.0], [58.5, 308.0], [58.6, 309.0], [58.7, 310.0], [58.8, 311.0], [58.9, 312.0], [59.0, 313.0], [59.1, 314.0], [59.2, 316.0], [59.3, 317.0], [59.4, 318.0], [59.5, 320.0], [59.6, 320.0], [59.7, 321.0], [59.8, 323.0], [59.9, 324.0], [60.0, 325.0], [60.1, 326.0], [60.2, 327.0], [60.3, 328.0], [60.4, 329.0], [60.5, 330.0], [60.6, 332.0], [60.7, 333.0], [60.8, 334.0], [60.9, 335.0], [61.0, 336.0], [61.1, 338.0], [61.2, 339.0], [61.3, 340.0], [61.4, 341.0], [61.5, 342.0], [61.6, 343.0], [61.7, 344.0], [61.8, 345.0], [61.9, 346.0], [62.0, 347.0], [62.1, 348.0], [62.2, 350.0], [62.3, 351.0], [62.4, 352.0], [62.5, 353.0], [62.6, 355.0], [62.7, 356.0], [62.8, 357.0], [62.9, 358.0], [63.0, 359.0], [63.1, 360.0], [63.2, 361.0], [63.3, 362.0], [63.4, 363.0], [63.5, 364.0], [63.6, 365.0], [63.7, 366.0], [63.8, 367.0], [63.9, 368.0], [64.0, 370.0], [64.1, 371.0], [64.2, 372.0], [64.3, 373.0], [64.4, 374.0], [64.5, 375.0], [64.6, 376.0], [64.7, 377.0], [64.8, 379.0], [64.9, 380.0], [65.0, 381.0], [65.1, 382.0], [65.2, 383.0], [65.3, 384.0], [65.4, 385.0], [65.5, 386.0], [65.6, 388.0], [65.7, 389.0], [65.8, 389.0], [65.9, 391.0], [66.0, 392.0], [66.1, 393.0], [66.2, 394.0], [66.3, 396.0], [66.4, 397.0], [66.5, 398.0], [66.6, 399.0], [66.7, 400.0], [66.8, 401.0], [66.9, 402.0], [67.0, 403.0], [67.1, 404.0], [67.2, 405.0], [67.3, 406.0], [67.4, 408.0], [67.5, 409.0], [67.6, 410.0], [67.7, 411.0], [67.8, 412.0], [67.9, 413.0], [68.0, 414.0], [68.1, 415.0], [68.2, 416.0], [68.3, 417.0], [68.4, 419.0], [68.5, 420.0], [68.6, 421.0], [68.7, 422.0], [68.8, 423.0], [68.9, 424.0], [69.0, 425.0], [69.1, 426.0], [69.2, 427.0], [69.3, 428.0], [69.4, 430.0], [69.5, 431.0], [69.6, 432.0], [69.7, 433.0], [69.8, 434.0], [69.9, 435.0], [70.0, 436.0], [70.1, 437.0], [70.2, 438.0], [70.3, 439.0], [70.4, 441.0], [70.5, 441.0], [70.6, 443.0], [70.7, 444.0], [70.8, 445.0], [70.9, 446.0], [71.0, 447.0], [71.1, 448.0], [71.2, 449.0], [71.3, 450.0], [71.4, 452.0], [71.5, 453.0], [71.6, 454.0], [71.7, 455.0], [71.8, 456.0], [71.9, 457.0], [72.0, 458.0], [72.1, 460.0], [72.2, 461.0], [72.3, 462.0], [72.4, 463.0], [72.5, 464.0], [72.6, 466.0], [72.7, 467.0], [72.8, 468.0], [72.9, 469.0], [73.0, 470.0], [73.1, 471.0], [73.2, 472.0], [73.3, 474.0], [73.4, 475.0], [73.5, 476.0], [73.6, 477.0], [73.7, 478.0], [73.8, 479.0], [73.9, 480.0], [74.0, 481.0], [74.1, 482.0], [74.2, 483.0], [74.3, 484.0], [74.4, 485.0], [74.5, 486.0], [74.6, 487.0], [74.7, 488.0], [74.8, 489.0], [74.9, 490.0], [75.0, 491.0], [75.1, 493.0], [75.2, 494.0], [75.3, 495.0], [75.4, 496.0], [75.5, 497.0], [75.6, 498.0], [75.7, 499.0], [75.8, 500.0], [75.9, 502.0], [76.0, 503.0], [76.1, 504.0], [76.2, 505.0], [76.3, 506.0], [76.4, 508.0], [76.5, 509.0], [76.6, 510.0], [76.7, 512.0], [76.8, 513.0], [76.9, 514.0], [77.0, 515.0], [77.1, 516.0], [77.2, 518.0], [77.3, 519.0], [77.4, 521.0], [77.5, 522.0], [77.6, 523.0], [77.7, 524.0], [77.8, 526.0], [77.9, 527.0], [78.0, 529.0], [78.1, 530.0], [78.2, 532.0], [78.3, 533.0], [78.4, 535.0], [78.5, 536.0], [78.6, 538.0], [78.7, 539.0], [78.8, 539.0], [78.9, 540.0], [79.0, 542.0], [79.1, 543.0], [79.2, 545.0], [79.3, 547.0], [79.4, 548.0], [79.5, 550.0], [79.6, 551.0], [79.7, 553.0], [79.8, 555.0], [79.9, 557.0], [80.0, 559.0], [80.1, 560.0], [80.2, 562.0], [80.3, 563.0], [80.4, 565.0], [80.5, 566.0], [80.6, 568.0], [80.7, 569.0], [80.8, 571.0], [80.9, 573.0], [81.0, 575.0], [81.1, 576.0], [81.2, 578.0], [81.3, 579.0], [81.4, 582.0], [81.5, 584.0], [81.6, 586.0], [81.7, 588.0], [81.8, 590.0], [81.9, 592.0], [82.0, 594.0], [82.1, 596.0], [82.2, 599.0], [82.3, 601.0], [82.4, 603.0], [82.5, 605.0], [82.6, 607.0], [82.7, 609.0], [82.8, 611.0], [82.9, 612.0], [83.0, 613.0], [83.1, 615.0], [83.2, 617.0], [83.3, 619.0], [83.4, 621.0], [83.5, 622.0], [83.6, 623.0], [83.7, 624.0], [83.8, 626.0], [83.9, 629.0], [84.0, 631.0], [84.1, 634.0], [84.2, 637.0], [84.3, 639.0], [84.4, 641.0], [84.5, 642.0], [84.6, 644.0], [84.7, 645.0], [84.8, 648.0], [84.9, 650.0], [85.0, 653.0], [85.1, 654.0], [85.2, 656.0], [85.3, 657.0], [85.4, 659.0], [85.5, 663.0], [85.6, 665.0], [85.7, 668.0], [85.8, 671.0], [85.9, 673.0], [86.0, 676.0], [86.1, 678.0], [86.2, 680.0], [86.3, 683.0], [86.4, 685.0], [86.5, 688.0], [86.6, 691.0], [86.7, 695.0], [86.8, 699.0], [86.9, 702.0], [87.0, 705.0], [87.1, 709.0], [87.2, 712.0], [87.3, 714.0], [87.4, 717.0], [87.5, 721.0], [87.6, 724.0], [87.7, 727.0], [87.8, 731.0], [87.9, 734.0], [88.0, 738.0], [88.1, 741.0], [88.2, 745.0], [88.3, 747.0], [88.4, 750.0], [88.5, 752.0], [88.6, 757.0], [88.7, 760.0], [88.8, 764.0], [88.9, 767.0], [89.0, 771.0], [89.1, 776.0], [89.2, 779.0], [89.3, 781.0], [89.4, 784.0], [89.5, 788.0], [89.6, 789.0], [89.7, 792.0], [89.8, 794.0], [89.9, 798.0], [90.0, 802.0], [90.1, 805.0], [90.2, 807.0], [90.3, 810.0], [90.4, 813.0], [90.5, 816.0], [90.6, 818.0], [90.7, 820.0], [90.8, 823.0], [90.9, 827.0], [91.0, 830.0], [91.1, 833.0], [91.2, 835.0], [91.3, 837.0], [91.4, 842.0], [91.5, 848.0], [91.6, 853.0], [91.7, 857.0], [91.8, 862.0], [91.9, 867.0], [92.0, 872.0], [92.1, 878.0], [92.2, 881.0], [92.3, 884.0], [92.4, 890.0], [92.5, 894.0], [92.6, 899.0], [92.7, 905.0], [92.8, 912.0], [92.9, 921.0], [93.0, 928.0], [93.1, 937.0], [93.2, 941.0], [93.3, 944.0], [93.4, 947.0], [93.5, 953.0], [93.6, 958.0], [93.7, 963.0], [93.8, 967.0], [93.9, 973.0], [94.0, 979.0], [94.1, 986.0], [94.2, 991.0], [94.3, 994.0], [94.4, 999.0], [94.5, 1012.0], [94.6, 1016.0], [94.7, 1025.0], [94.8, 1033.0], [94.9, 1038.0], [95.0, 1040.0], [95.1, 1046.0], [95.2, 1058.0], [95.3, 1066.0], [95.4, 1082.0], [95.5, 1094.0], [95.6, 1113.0], [95.7, 1133.0], [95.8, 1149.0], [95.9, 1164.0], [96.0, 1224.0], [96.1, 1275.0], [96.2, 1325.0], [96.3, 1360.0], [96.4, 1399.0], [96.5, 1408.0], [96.6, 1449.0], [96.7, 1573.0], [96.8, 1659.0], [96.9, 1727.0], [97.0, 2222.0], [97.1, 2480.0], [97.2, 2561.0], [97.3, 2683.0], [97.4, 2908.0], [97.5, 3066.0], [97.6, 3210.0], [97.7, 3343.0], [97.8, 3525.0], [97.9, 3781.0], [98.0, 4111.0], [98.1, 4470.0], [98.2, 4628.0], [98.3, 4993.0], [98.4, 6450.0], [98.5, 6936.0], [98.6, 7776.0], [98.7, 11718.0], [98.8, 13014.0], [98.9, 14091.0], [99.0, 14867.0], [99.1, 16222.0], [99.2, 16688.0], [99.3, 16765.0], [99.4, 17633.0], [99.5, 17842.0], [99.6, 18334.0], [99.7, 18872.0], [99.8, 20439.0], [99.9, 20443.0], [100.0, 67158.0]], "isOverall": false, "label": "商品秒杀", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 41187.0, "series": [{"data": [[0.0, 41187.0], [600.0, 2539.0], [700.0, 1258.0], [800.0, 182.0], [900.0, 254.0], [1000.0, 102.0], [1100.0, 38.0], [1200.0, 99.0], [1300.0, 95.0], [1400.0, 15.0], [1500.0, 23.0], [1600.0, 476.0], [1700.0, 77.0], [1800.0, 23.0], [1900.0, 8.0], [2000.0, 7.0], [2100.0, 8.0], [2200.0, 8.0], [2300.0, 6.0], [2400.0, 72.0], [2500.0, 8.0], [2600.0, 9.0], [2700.0, 9.0], [2800.0, 180.0], [2900.0, 148.0], [3000.0, 137.0], [3100.0, 85.0], [3200.0, 110.0], [3300.0, 48.0], [3400.0, 22.0], [3500.0, 16.0], [3600.0, 5.0], [3700.0, 8.0], [3800.0, 11.0], [3900.0, 7.0], [4000.0, 30.0], [4100.0, 75.0], [4200.0, 19.0], [4300.0, 15.0], [66100.0, 89.0], [67100.0, 33.0], [4400.0, 22.0], [4500.0, 39.0], [4600.0, 32.0], [4700.0, 43.0], [4800.0, 6.0], [4900.0, 27.0], [5000.0, 1.0], [5100.0, 2.0], [5200.0, 3.0], [5700.0, 3.0], [5800.0, 10.0], [5900.0, 7.0], [6000.0, 5.0], [6100.0, 5.0], [6200.0, 1.0], [8600.0, 94.0], [11700.0, 62.0], [11800.0, 2.0], [13800.0, 6.0], [13900.0, 1.0], [16200.0, 5.0], [16100.0, 31.0], [16600.0, 87.0], [16700.0, 9.0], [18500.0, 15.0], [18600.0, 1.0], [23700.0, 1.0], [100.0, 18310.0], [32900.0, 1.0], [35700.0, 5.0], [35200.0, 104.0], [39800.0, 4.0], [45900.0, 1.0], [200.0, 7295.0], [67000.0, 74.0], [300.0, 3186.0], [400.0, 2180.0], [112800.0, 109.0], [500.0, 2789.0]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[0.0, 24574.0], [67100.0, 17.0], [100.0, 13951.0], [35700.0, 21.0], [200.0, 8621.0], [67000.0, 37.0], [300.0, 7260.0], [400.0, 7408.0], [500.0, 5305.0], [600.0, 3745.0], [700.0, 2546.0], [800.0, 2178.0], [900.0, 1458.0], [1000.0, 925.0], [1100.0, 351.0], [1200.0, 146.0], [1300.0, 216.0], [1400.0, 212.0], [1500.0, 32.0], [1600.0, 120.0], [1700.0, 69.0], [1800.0, 18.0], [1900.0, 11.0], [2000.0, 12.0], [2100.0, 7.0], [2300.0, 15.0], [2200.0, 9.0], [2400.0, 84.0], [2500.0, 78.0], [2600.0, 68.0], [2800.0, 33.0], [2700.0, 40.0], [2900.0, 53.0], [3000.0, 48.0], [3100.0, 62.0], [3200.0, 54.0], [3300.0, 65.0], [3400.0, 42.0], [3500.0, 21.0], [3600.0, 39.0], [3700.0, 31.0], [3800.0, 19.0], [3900.0, 18.0], [4000.0, 33.0], [4100.0, 65.0], [4200.0, 13.0], [4300.0, 3.0], [4400.0, 24.0], [4600.0, 55.0], [4500.0, 52.0], [4700.0, 30.0], [4800.0, 9.0], [4900.0, 1.0], [5000.0, 2.0], [5100.0, 2.0], [5300.0, 10.0], [5200.0, 3.0], [5400.0, 6.0], [5600.0, 9.0], [5500.0, 2.0], [5700.0, 4.0], [5800.0, 7.0], [5900.0, 8.0], [6100.0, 6.0], [6000.0, 9.0], [6200.0, 7.0], [6300.0, 5.0], [6400.0, 4.0], [6500.0, 2.0], [6600.0, 3.0], [6900.0, 22.0], [6800.0, 53.0], [6700.0, 14.0], [7000.0, 12.0], [7100.0, 8.0], [7200.0, 5.0], [7300.0, 10.0], [7400.0, 5.0], [7500.0, 14.0], [7600.0, 3.0], [7700.0, 11.0], [7800.0, 4.0], [7900.0, 18.0], [8000.0, 7.0], [8100.0, 6.0], [8200.0, 5.0], [8300.0, 5.0], [8400.0, 4.0], [8500.0, 3.0], [8700.0, 1.0], [8800.0, 3.0], [8900.0, 2.0], [9600.0, 1.0], [10700.0, 2.0], [10900.0, 1.0], [11200.0, 1.0], [11100.0, 1.0], [11700.0, 58.0], [11900.0, 2.0], [12000.0, 3.0], [12100.0, 1.0], [12200.0, 1.0], [12600.0, 1.0], [12700.0, 2.0], [12800.0, 1.0], [13200.0, 19.0], [13300.0, 3.0], [12900.0, 26.0], [13000.0, 19.0], [13100.0, 8.0], [13800.0, 14.0], [13700.0, 1.0], [13900.0, 10.0], [14100.0, 8.0], [14200.0, 5.0], [14300.0, 14.0], [14000.0, 11.0], [14400.0, 16.0], [14500.0, 12.0], [14600.0, 2.0], [14700.0, 18.0], [14800.0, 16.0], [14900.0, 11.0], [15000.0, 10.0], [15100.0, 5.0], [15200.0, 8.0], [15300.0, 10.0], [15500.0, 3.0], [15400.0, 11.0], [15600.0, 2.0], [15800.0, 1.0], [15700.0, 1.0], [16100.0, 2.0], [16300.0, 5.0], [16200.0, 2.0], [15900.0, 5.0], [16000.0, 2.0], [17300.0, 7.0], [16500.0, 8.0], [17400.0, 7.0], [17200.0, 7.0], [16600.0, 137.0], [17000.0, 11.0], [16800.0, 11.0], [16700.0, 5.0], [16400.0, 8.0], [16900.0, 11.0], [17100.0, 8.0], [17600.0, 34.0], [17500.0, 7.0], [17800.0, 37.0], [17900.0, 19.0], [18000.0, 8.0], [17700.0, 41.0], [18100.0, 8.0], [18400.0, 8.0], [18200.0, 9.0], [18300.0, 44.0], [18500.0, 26.0], [18700.0, 10.0], [18600.0, 9.0], [19100.0, 6.0], [19300.0, 7.0], [18900.0, 5.0], [19000.0, 7.0], [19400.0, 2.0], [18800.0, 4.0], [19200.0, 4.0], [20400.0, 117.0], [19700.0, 6.0], [19500.0, 6.0], [19800.0, 2.0], [19900.0, 3.0], [19600.0, 1.0], [20100.0, 2.0], [31600.0, 1.0]], "isOverall": false, "label": "商品秒杀", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 112800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2795.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 70026.0, "series": [{"data": [[0.0, 67305.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 23609.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2795.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 70026.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 62.09174311926605, "minX": 1.66602162E12, "maxY": 800.0, "series": [{"data": [[1.66602162E12, 755.4145047497382], [1.6660218E12, 62.09174311926605], [1.66602168E12, 800.0], [1.66602174E12, 795.5278630087533]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6660218E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.5, "minX": 12.0, "maxY": 112821.0, "series": [{"data": [[12.0, 112821.0], [13.0, 112821.0], [20.0, 112820.33333333333], [21.0, 112820.0], [39.0, 112821.0], [41.0, 112811.0], [40.0, 112821.0], [51.0, 112810.9], [61.0, 112810.0], [63.0, 112810.0], [62.0, 112810.0], [83.0, 112810.8], [82.0, 112811.0], [80.0, 112811.0], [84.0, 112810.90909090909], [88.0, 122.62068965517243], [89.0, 143.51724137931035], [90.0, 114.95238095238095], [92.0, 68.0], [93.0, 101.33333333333333], [94.0, 88.18181818181819], [96.0, 56405.0], [97.0, 112801.22222222222], [101.0, 10.0], [102.0, 3.0], [103.0, 2.0], [104.0, 0.5], [105.0, 1.0], [106.0, 1.25], [107.0, 3.0], [109.0, 94001.33333333334], [110.0, 1.0], [111.0, 2.0], [112.0, 1.0], [113.0, 1.0], [115.0, 2.0], [116.0, 1.8], [117.0, 1.0], [119.0, 1.8], [120.0, 1.0], [121.0, 1.5], [122.0, 2.0], [123.0, 0.6666666666666667], [125.0, 1.5], [126.0, 1.0], [127.0, 1.6666666666666667], [128.0, 0.6666666666666667], [129.0, 1.0], [130.0, 1.5], [131.0, 1.5], [132.0, 0.5], [134.0, 1.0], [135.0, 2.0], [136.0, 2.0], [137.0, 0.75], [138.0, 1.5], [139.0, 1.0], [140.0, 1.3333333333333333], [141.0, 1.0], [142.0, 1.25], [143.0, 1.0], [144.0, 0.5], [146.0, 1.5], [147.0, 1.0], [148.0, 1.0], [149.0, 2.5], [151.0, 0.75], [152.0, 0.5], [153.0, 2.8], [154.0, 0.6], [155.0, 2.0], [157.0, 2.0], [158.0, 0.875], [159.0, 1.5], [160.0, 1.3333333333333333], [161.0, 1.3333333333333333], [163.0, 2.0], [164.0, 1.2], [165.0, 0.6666666666666666], [166.0, 1.5], [168.0, 1.6666666666666667], [169.0, 1.0], [170.0, 1.75], [171.0, 2.5], [172.0, 2.0], [174.0, 1.7777777777777781], [175.0, 1.0], [176.0, 1.5], [177.0, 1.0], [179.0, 0.8333333333333334], [180.0, 1.5], [181.0, 1.6666666666666667], [183.0, 2.25], [184.0, 1.8571428571428572], [185.0, 1.0], [186.0, 2.2], [189.0, 1.8], [190.0, 1.2857142857142856], [192.0, 2.875], [193.0, 2.1250000000000004], [194.0, 2.5], [195.0, 2.0], [196.0, 1.0], [197.0, 1.0], [199.0, 3.0], [200.0, 1.5714285714285714], [201.0, 0.5], [202.0, 1.0], [203.0, 1.5714285714285714], [204.0, 0.75], [205.0, 1.3333333333333333], [207.0, 1.7], [208.0, 1.5], [209.0, 1.2], [213.0, 5.933333333333334], [214.0, 0.6666666666666666], [215.0, 2.0], [219.0, 13.0], [220.0, 13.11111111111111], [221.0, 3.9999999999999996], [223.0, 6.0], [224.0, 7.0], [228.0, 10.344827586206895], [229.0, 1.0], [238.0, 18.849999999999998], [240.0, 0.8571428571428572], [241.0, 2.0], [251.0, 25.2], [252.0, 21.5], [253.0, 11.04], [254.0, 8.31818181818182], [258.0, 15.0], [266.0, 48.0], [271.0, 65.0], [274.0, 74.66666666666667], [275.0, 54.44117647058823], [276.0, 18.382352941176464], [277.0, 3.0], [278.0, 33095.5], [279.0, 66191.0], [280.0, 9.0], [283.0, 66183.5], [287.0, 66189.0], [286.0, 66186.0], [285.0, 66184.0], [303.0, 24129.090909090908], [295.0, 33126.25], [288.0, 66189.0], [291.0, 66184.0], [289.0, 66185.0], [294.0, 66184.0], [293.0, 66184.0], [297.0, 57922.62500000001], [300.0, 33140.83333333333], [302.0, 66192.0], [301.0, 66191.0], [299.0, 66191.5], [298.0, 66190.0], [296.0, 66184.0], [307.0, 50306.75], [304.0, 89.0], [305.0, 1012.0579710144928], [306.0, 9078.136363636364], [310.0, 26835.5], [308.0, 67072.0], [318.0, 67057.33333333333], [313.0, 67062.0], [312.0, 67067.0], [317.0, 66757.0], [316.0, 67093.0], [315.0, 66410.25], [314.0, 66192.0], [334.0, 67125.0], [326.0, 74.0], [320.0, 26854.4], [323.0, 67048.5], [322.0, 67047.0], [321.0, 66830.5], [327.0, 66184.5], [325.0, 72.0], [324.0, 66191.0], [335.0, 4293.6875], [329.0, 66183.0], [328.0, 66182.5], [333.0, 67132.0], [332.0, 66620.0], [331.0, 66183.0], [330.0, 66183.0], [350.0, 67108.0], [338.0, 6794.866666666666], [339.0, 2417.541176470588], [340.0, 16789.0], [341.0, 67126.0], [342.0, 33555.5], [343.0, 67089.5], [337.0, 67120.5], [336.0, 67128.0], [351.0, 67096.0], [344.0, 67108.0], [348.0, 67095.0], [347.0, 67084.0], [346.0, 67101.33333333333], [352.0, 61268.608695652176], [353.0, 60360.8], [363.0, 13856.0], [359.0, 66783.30769230769], [357.0, 66615.0], [356.0, 67038.0], [354.0, 67052.0], [355.0, 67031.0], [368.0, 122.5], [373.0, 142.0], [372.0, 4917.555555555556], [374.0, 143.0], [375.0, 147.0], [376.0, 149.0], [379.0, 4918.000000000001], [380.0, 158.66666666666666], [381.0, 130.5454545454546], [382.0, 106.88888888888889], [383.0, 63.72839506172839], [384.0, 20.296296296296298], [392.0, 37.0], [404.0, 82.0], [405.0, 84.0], [407.0, 91.0], [419.0, 141.66666666666666], [428.0, 168.00000000000003], [432.0, 171.10526315789474], [433.0, 133.62025316455706], [434.0, 81.20754716981133], [435.0, 44.62500000000001], [436.0, 22.333333333333332], [438.0, 25.70588235294118], [441.0, 33.0], [443.0, 38.0], [450.0, 65.5], [485.0, 201.0], [487.0, 206.0], [488.0, 211.0], [489.0, 215.0], [492.0, 226.0], [508.0, 287.5714285714286], [509.0, 279.9], [515.0, 77.87499999999999], [512.0, 267.8157894736842], [513.0, 236.4848484848485], [514.0, 151.6934306569343], [516.0, 42.680851063829785], [517.0, 26.071428571428573], [524.0, 46.0], [542.0, 4572.0], [540.0, 3542.0], [539.0, 3845.0], [538.0, 3540.0], [537.0, 3538.0], [536.0, 4665.0], [550.0, 145.0], [553.0, 2374.0], [552.0, 4702.0], [554.0, 162.0], [558.0, 2432.0], [548.0, 4603.75], [547.0, 4731.0], [545.0, 4583.0], [544.0, 4567.0], [556.0, 4690.5], [574.0, 4709.0], [560.0, 4603.5], [563.0, 4537.666666666667], [561.0, 4600.5], [565.0, 4486.0], [564.0, 4737.0], [573.0, 4558.0], [572.0, 4677.666666666667], [571.0, 4529.5], [570.0, 4746.0], [551.0, 4609.0], [605.0, 341.25], [604.0, 352.1666666666667], [606.0, 319.2352941176471], [607.0, 625.3214285714287], [603.0, 4816.666666666667], [602.0, 4693.0], [600.0, 4754.0], [591.0, 4560.0], [580.0, 4575.0], [576.0, 4654.333333333333], [583.0, 4616.666666666667], [582.0, 4592.666666666667], [590.0, 4570.0], [588.0, 4626.2], [586.0, 4535.0], [585.0, 4518.0], [584.0, 4692.0], [598.0, 4555.0], [597.0, 4562.0], [595.0, 4525.5], [611.0, 191.45000000000002], [608.0, 361.26], [609.0, 258.0842105263158], [610.0, 349.58333333333337], [612.0, 109.22058823529412], [613.0, 1908.3], [617.0, 49.5], [616.0, 4719.0], [619.0, 4652.0], [618.0, 4663.333333333333], [621.0, 4539.666666666667], [620.0, 4618.5], [623.0, 4648.0], [629.0, 4740.5], [628.0, 4538.0], [627.0, 4657.0], [624.0, 4631.5], [670.0, 70.0], [641.0, 140.0], [643.0, 149.0], [661.0, 209.58333333333334], [663.0, 223.0], [662.0, 48.0], [671.0, 50.0], [668.0, 35.0], [667.0, 29.0], [665.0, 69.0], [699.0, 85.0], [687.0, 323.0], [673.0, 45.0], [677.0, 69.0], [675.0, 39.0], [679.0, 55.0], [678.0, 38.0], [700.0, 84.0], [698.0, 86.0], [697.0, 75.0], [694.0, 65.5], [693.0, 113.0], [689.0, 56.0], [685.0, 87.0], [681.0, 35.0], [680.0, 47.0], [732.0, 131.0], [733.0, 70.0], [720.0, 101.0], [731.0, 96.5], [730.0, 106.0], [729.0, 103.0], [728.0, 125.0], [719.0, 105.0], [705.0, 79.0], [708.0, 74.0], [707.0, 76.0], [711.0, 69.0], [709.0, 73.0], [715.0, 116.0], [714.0, 111.0], [713.0, 89.0], [712.0, 101.0], [725.0, 99.0], [724.0, 139.0], [722.0, 98.0], [721.0, 58.0], [743.0, 421.5281690140845], [747.0, 180.21739130434787], [744.0, 213.22033898305082], [745.0, 255.61904761904768], [746.0, 245.45833333333334], [748.0, 95.4], [749.0, 291.7525773195876], [750.0, 446.33333333333326], [751.0, 109.0], [741.0, 97.0], [740.0, 109.0], [739.0, 100.66666666666667], [738.0, 94.0], [737.0, 65.0], [754.0, 64.71428571428571], [767.0, 112.0], [752.0, 105.0], [765.0, 88.0], [766.0, 100.5], [763.0, 98.0], [762.0, 101.0], [764.0, 87.8], [760.0, 84.66666666666667], [761.0, 75.0], [755.0, 58.0], [756.0, 75.0], [759.0, 85.66666666666667], [796.0, 105.25], [772.0, 113.0], [781.0, 133.5], [780.0, 103.0], [779.0, 110.0], [777.0, 97.0], [783.0, 104.5], [770.0, 111.0], [769.0, 109.0], [782.0, 109.2], [784.0, 159.0], [785.0, 104.0], [789.0, 128.0], [787.0, 117.0], [791.0, 125.66666666666667], [790.0, 99.4], [799.0, 99.5], [798.0, 98.33333333333333], [795.0, 56.0], [794.0, 118.0], [793.0, 100.5], [792.0, 103.5], [774.0, 86.0], [800.0, 328.5668744615085]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[786.3049233429521, 636.5921284964522]], "isOverall": false, "label": "商品列表-Aggregated", "isController": false}, {"data": [[99.0, 17.0], [101.0, 27.0], [102.0, 30.0], [104.0, 35.0], [105.0, 40.0], [106.0, 28.0], [109.0, 23.0], [111.0, 35.5], [113.0, 69.0], [115.0, 58.666666666666664], [116.0, 45.0], [118.0, 96.0], [119.0, 101.0], [121.0, 103.0], [123.0, 117.0], [126.0, 114.25], [127.0, 132.0], [128.0, 134.0], [130.0, 11.0], [131.0, 56.0], [132.0, 74.66666666666666], [135.0, 133.66666666666666], [137.0, 171.5], [139.0, 20.0], [140.0, 36.0], [141.0, 101.0], [142.0, 141.5], [143.0, 145.5], [145.0, 173.5], [146.0, 205.0], [147.0, 95.5], [148.0, 209.0], [149.0, 150.8], [150.0, 186.0], [151.0, 118.5], [152.0, 69.0], [153.0, 116.0], [154.0, 236.0], [155.0, 26.0], [157.0, 161.00000000000003], [159.0, 103.0], [160.0, 163.6], [161.0, 117.0], [162.0, 139.33333333333334], [163.0, 275.0], [164.0, 154.6], [165.0, 233.0], [166.0, 220.5], [167.0, 190.33333333333334], [169.0, 132.0], [171.0, 113.0], [172.0, 178.5], [173.0, 58.0], [174.0, 286.0], [176.0, 95.0], [177.0, 204.5], [179.0, 196.6], [181.0, 144.33333333333334], [183.0, 355.0], [184.0, 164.5], [186.0, 223.0], [188.0, 289.0], [189.0, 375.0], [190.0, 289.1666666666667], [191.0, 197.5], [192.0, 287.62500000000006], [193.0, 258.6666666666667], [194.0, 305.8], [195.0, 250.0], [196.0, 135.5], [197.0, 263.0], [199.0, 182.66666666666666], [200.0, 205.2], [201.0, 218.6], [202.0, 193.0], [203.0, 381.5], [204.0, 439.0], [205.0, 306.0], [207.0, 275.8888888888889], [209.0, 221.0], [210.0, 305.2], [211.0, 205.0], [213.0, 331.0], [214.0, 383.0], [215.0, 207.33333333333334], [217.0, 448.0], [218.0, 269.5], [219.0, 265.2], [220.0, 339.6666666666667], [221.0, 221.0], [222.0, 202.33333333333331], [223.0, 186.33333333333334], [224.0, 45.5], [225.0, 459.0], [226.0, 225.14285714285714], [227.0, 230.0], [228.0, 306.1666666666667], [229.0, 168.0], [230.0, 146.75], [231.0, 86.0], [232.0, 113.66666666666667], [233.0, 56.5], [234.0, 190.99999999999997], [235.0, 242.0], [236.0, 231.0], [238.0, 178.66666666666666], [239.0, 97.0], [240.0, 253.25], [250.0, 242.94444444444446], [251.0, 244.26315789473688], [252.0, 226.75], [253.0, 168.5], [254.0, 256.3333333333333], [255.0, 273.0], [258.0, 202.14285714285714], [256.0, 191.25], [259.0, 227.0], [269.0, 340.0], [270.0, 152.5], [271.0, 311.09999999999997], [260.0, 327.0], [261.0, 266.3333333333333], [262.0, 326.25], [263.0, 167.0], [265.0, 354.0], [266.0, 281.5], [267.0, 410.5], [274.0, 253.33333333333334], [273.0, 158.83333333333334], [275.0, 173.5], [284.0, 196.5], [285.0, 125.0], [286.0, 174.0], [287.0, 214.0], [276.0, 162.66666666666666], [277.0, 235.66666666666666], [278.0, 324.0], [279.0, 296.4], [280.0, 278.0], [281.0, 323.5], [282.0, 312.0], [283.0, 24.0], [290.0, 296.0], [289.0, 263.0], [291.0, 221.5], [300.0, 273.6], [301.0, 293.3333333333333], [302.0, 399.0], [303.0, 278.0], [292.0, 490.0], [293.0, 391.0], [294.0, 190.25], [295.0, 277.6], [296.0, 277.0], [297.0, 281.6], [299.0, 356.0], [305.0, 284.0], [304.0, 249.0], [306.0, 17013.5], [307.0, 395.5], [308.0, 271.2], [310.0, 17086.0], [311.0, 33722.0], [312.0, 11403.000000000002], [319.0, 297.3333333333333], [317.0, 277.8], [316.0, 67038.0], [318.0, 213.0], [313.0, 264.57142857142856], [314.0, 281.0], [321.0, 22478.666666666668], [320.0, 22545.0], [322.0, 33658.0], [323.0, 13612.9], [324.0, 208.5], [325.0, 19377.142857142855], [326.0, 22564.5], [328.0, 321.3333333333333], [334.0, 22637.333333333332], [335.0, 283.24999999999994], [332.0, 33749.0], [333.0, 20339.6], [329.0, 306.0], [330.0, 432.0], [331.0, 328.16666666666663], [339.0, 280.3333333333333], [337.0, 33703.75], [336.0, 44787.333333333336], [343.0, 67122.0], [338.0, 33668.5], [340.0, 353.6], [341.0, 67133.0], [342.0, 13672.5], [344.0, 319.6666666666667], [351.0, 67122.0], [348.0, 319.0], [350.0, 7675.222222222223], [345.0, 269.5], [347.0, 271.6666666666667], [353.0, 40338.0], [352.0, 61964.00000000001], [354.0, 13671.2], [355.0, 33643.25], [356.0, 7674.777777777777], [357.0, 163.0], [359.0, 11413.333333333332], [361.0, 152.5], [366.0, 233.5], [367.0, 281.2222222222222], [364.0, 439.0], [365.0, 231.0], [362.0, 222.0], [363.0, 5658.0], [380.0, 359.2], [368.0, 385.0], [371.0, 255.33333333333334], [381.0, 350.0], [382.0, 169.0], [383.0, 413.14285714285717], [372.0, 228.75], [373.0, 317.0], [374.0, 300.0], [376.0, 308.8571428571429], [377.0, 278.5], [378.0, 286.0], [379.0, 268.875], [385.0, 314.0], [384.0, 41.5], [387.0, 329.0], [396.0, 342.7142857142857], [397.0, 275.6], [398.0, 338.8], [399.0, 483.0], [388.0, 443.0], [390.0, 344.8], [391.0, 413.0], [392.0, 257.85714285714283], [393.0, 127.0], [394.0, 196.0], [401.0, 375.0], [400.0, 226.0], [402.0, 321.5], [403.0, 499.0], [404.0, 335.0], [405.0, 265.0], [406.0, 255.0], [407.0, 365.5], [408.0, 220.0], [414.0, 379.16666666666663], [412.0, 412.5], [413.0, 421.0], [409.0, 355.8], [410.0, 105.0], [411.0, 249.33333333333334], [417.0, 195.33333333333334], [416.0, 321.5], [418.0, 249.0], [419.0, 296.53846153846155], [420.0, 174.0], [421.0, 206.0], [422.0, 358.6666666666667], [423.0, 311.0], [424.0, 204.75], [430.0, 274.5], [431.0, 379.14285714285717], [428.0, 308.0], [429.0, 178.0], [425.0, 286.0], [426.0, 288.3333333333333], [427.0, 293.5], [433.0, 232.6], [432.0, 358.25], [434.0, 199.0], [435.0, 277.75], [436.0, 365.6666666666667], [437.0, 250.5], [438.0, 359.25], [440.0, 465.5], [444.0, 334.5], [447.0, 414.0], [441.0, 213.2], [443.0, 340.7], [449.0, 261.6666666666667], [448.0, 310.33333333333337], [450.0, 196.0], [451.0, 333.3333333333333], [452.0, 70.0], [453.0, 306.0], [454.0, 371.75], [456.0, 405.25], [461.0, 352.625], [463.0, 321.0], [457.0, 292.0], [458.0, 473.0], [459.0, 305.5], [465.0, 390.8], [464.0, 368.33333333333337], [466.0, 267.0], [467.0, 388.6666666666667], [468.0, 428.5], [469.0, 307.4], [470.0, 258.3333333333333], [471.0, 247.75], [472.0, 528.0], [478.0, 378.0], [479.0, 369.6666666666667], [476.0, 334.8571428571429], [477.0, 432.0], [473.0, 343.25], [474.0, 479.3333333333333], [475.0, 395.0], [480.0, 181.0], [485.0, 337.0], [486.0, 203.0], [487.0, 412.0], [488.0, 271.5], [494.0, 507.0], [495.0, 372.6666666666667], [489.0, 354.5714285714286], [490.0, 219.0], [491.0, 227.66666666666666], [492.0, 359.6666666666667], [493.0, 312.0], [497.0, 244.0], [496.0, 320.3333333333333], [498.0, 631.0], [499.0, 576.0], [500.0, 380.2], [501.0, 272.0], [502.0, 317.5], [503.0, 445.1666666666667], [504.0, 272.0], [510.0, 420.0], [511.0, 305.0], [508.0, 393.75], [509.0, 296.6666666666667], [505.0, 317.6], [506.0, 488.0], [507.0, 488.0], [517.0, 362.6875], [513.0, 378.0], [512.0, 407.62499999999994], [527.0, 470.5], [525.0, 361.25], [526.0, 496.0], [514.0, 409.0], [515.0, 523.0], [516.0, 527.0], [528.0, 335.0], [543.0, 1792.1666666666665], [541.0, 2506.333333333333], [542.0, 1736.0], [539.0, 478.6666666666667], [540.0, 2530.0], [536.0, 386.6666666666667], [537.0, 405.0], [529.0, 350.3333333333333], [530.0, 345.7142857142857], [531.0, 361.83333333333337], [533.0, 392.3333333333333], [535.0, 463.3333333333333], [520.0, 332.4], [522.0, 462.0], [523.0, 414.6666666666667], [524.0, 493.16666666666663], [550.0, 348.1111111111111], [545.0, 1765.3333333333333], [544.0, 2421.25], [559.0, 2488.0], [556.0, 1196.5454545454545], [557.0, 4664.0], [558.0, 1482.875], [554.0, 304.0], [555.0, 1598.0], [546.0, 1338.0], [547.0, 1213.2], [548.0, 2528.8333333333335], [551.0, 140.5], [568.0, 1803.5], [569.0, 218.0], [570.0, 377.5], [571.0, 3617.25], [572.0, 2163.5714285714284], [573.0, 544.8], [574.0, 3657.2], [575.0, 1779.6666666666667], [560.0, 1044.8333333333333], [561.0, 2476.0], [562.0, 393.625], [563.0, 2463.75], [564.0, 299.6666666666667], [565.0, 197.33333333333334], [566.0, 1091.6666666666665], [567.0, 2542.2857142857138], [552.0, 3161.3333333333335], [553.0, 464.8], [581.0, 484.6666666666667], [577.0, 691.6923076923076], [576.0, 3189.6666666666665], [590.0, 508.0], [591.0, 3339.6666666666665], [588.0, 610.2708333333335], [586.0, 4524.166666666667], [589.0, 3121.3333333333335], [578.0, 2418.5], [579.0, 430.5], [580.0, 3446.181818181818], [583.0, 2406.5], [600.0, 4652.0], [601.0, 4697.0], [594.0, 2453.0], [593.0, 4498.5], [592.0, 4560.333333333333], [595.0, 4591.0], [598.0, 4546.5], [596.0, 4576.25], [607.0, 4770.666666666667], [606.0, 4659.0], [604.0, 352.5], [603.0, 4750.0], [605.0, 426.28571428571433], [602.0, 3231.3333333333335], [584.0, 276.5], [585.0, 356.125], [615.0, 459.06666666666666], [609.0, 477.3333333333333], [608.0, 1645.0], [623.0, 2983.6], [620.0, 1603.75], [621.0, 4503.25], [622.0, 421.0], [610.0, 3703.0], [611.0, 4635.0], [612.0, 462.25], [614.0, 1453.75], [613.0, 4716.166666666667], [624.0, 2137.8], [639.0, 827.0], [637.0, 457.8], [638.0, 490.0], [635.0, 594.25], [636.0, 296.0], [633.0, 461.25], [634.0, 472.5], [625.0, 312.0], [626.0, 1041.3333333333333], [627.0, 1850.0], [628.0, 1915.125], [629.0, 2568.875], [631.0, 296.8888888888889], [616.0, 3312.0], [617.0, 1390.3333333333333], [618.0, 3213.6666666666665], [619.0, 415.0], [645.0, 517.75], [641.0, 407.125], [640.0, 923.6666666666666], [654.0, 673.6], [655.0, 557.0], [652.0, 850.1666666666666], [653.0, 561.0], [650.0, 400.2], [651.0, 192.0], [642.0, 448.6], [643.0, 720.75], [644.0, 141.0], [646.0, 1215.25], [664.0, 395.0], [665.0, 597.0], [666.0, 337.4], [667.0, 496.57142857142856], [668.0, 602.0], [669.0, 319.5], [670.0, 338.66666666666663], [671.0, 431.0], [658.0, 1353.0], [657.0, 1426.0], [659.0, 275.6], [660.0, 702.4285714285714], [661.0, 397.5], [663.0, 357.25], [648.0, 803.1666666666667], [649.0, 877.0], [678.0, 462.5], [674.0, 329.0], [673.0, 475.0], [672.0, 39.0], [686.0, 378.5], [687.0, 340.25], [684.0, 343.33333333333337], [685.0, 304.2], [682.0, 440.3333333333333], [683.0, 360.0], [675.0, 269.0], [676.0, 440.0], [677.0, 360.5], [679.0, 542.4285714285714], [696.0, 448.125], [697.0, 471.33333333333337], [699.0, 544.0], [700.0, 329.85714285714283], [701.0, 384.0], [702.0, 391.4], [703.0, 221.5], [688.0, 52.0], [689.0, 527.0], [690.0, 198.0], [691.0, 58.0], [692.0, 477.0], [693.0, 519.5], [694.0, 525.25], [695.0, 71.0], [680.0, 287.0], [681.0, 565.5], [710.0, 317.1428571428571], [705.0, 377.0], [704.0, 293.75], [717.0, 423.66666666666663], [718.0, 436.0], [715.0, 420.6666666666667], [716.0, 447.0], [706.0, 273.16666666666663], [707.0, 75.5], [708.0, 225.5], [709.0, 400.0], [711.0, 411.3333333333333], [728.0, 109.0], [729.0, 474.83333333333337], [730.0, 486.0], [731.0, 473.0], [732.0, 302.0], [733.0, 487.1666666666667], [734.0, 403.25], [735.0, 104.0], [720.0, 349.0], [721.0, 797.0], [722.0, 454.5], [723.0, 273.0], [724.0, 454.0], [725.0, 465.0], [726.0, 364.0], [727.0, 379.0], [713.0, 340.25], [712.0, 113.0], [714.0, 558.6], [761.0, 196.5], [750.0, 563.3333333333334], [743.0, 513.2307692307692], [744.0, 575.0], [746.0, 85.0], [745.0, 97.0], [747.0, 407.0], [749.0, 554.6], [751.0, 468.1000000000001], [736.0, 115.0], [742.0, 100.0], [738.0, 106.0], [752.0, 566.0], [767.0, 648.0], [765.0, 473.5], [764.0, 124.0], [766.0, 479.5], [762.0, 325.0], [763.0, 508.9090909090909], [760.0, 590.0], [753.0, 515.5], [754.0, 461.0], [755.0, 371.2], [756.0, 480.00000000000006], [757.0, 346.5], [759.0, 498.25], [758.0, 756.0], [774.0, 581.0], [769.0, 535.6666666666666], [768.0, 541.3333333333334], [783.0, 108.5], [782.0, 118.0], [780.0, 325.0], [781.0, 404.0], [778.0, 332.2], [779.0, 304.3333333333333], [770.0, 634.0], [772.0, 456.6666666666667], [773.0, 658.0], [775.0, 402.44444444444446], [792.0, 362.8], [793.0, 304.0], [794.0, 365.2857142857143], [795.0, 328.16666666666663], [796.0, 731.6666666666666], [797.0, 516.0], [799.0, 308.9230769230769], [784.0, 360.0], [785.0, 244.75000000000003], [786.0, 419.0], [787.0, 365.1428571428571], [789.0, 284.8333333333333], [790.0, 125.0], [791.0, 358.8], [776.0, 656.0], [777.0, 285.4], [800.0, 583.9539580885971]], "isOverall": false, "label": "商品秒杀", "isController": false}, {"data": [[790.6979023720846, 628.7466550676415]], "isOverall": false, "label": "商品秒杀-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 800.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.66602162E12, "maxY": 2223237.3833333333, "series": [{"data": [[1.66602162E12, 360242.63333333336], [1.6660218E12, 4427.216666666666], [1.66602168E12, 2223237.3833333333], [1.66602174E12, 746157.2166666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66602162E12, 74792.3], [1.6660218E12, 0.0], [1.66602168E12, 75556.05], [1.66602174E12, 70794.13333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6660218E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 335.2054969407912, "minX": 1.66602162E12, "maxY": 112811.2201834862, "series": [{"data": [[1.66602162E12, 365.0396023379041], [1.6660218E12, 112811.2201834862], [1.66602168E12, 335.2054969407912], [1.66602174E12, 873.4681598990496]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[1.66602162E12, 511.64696241876504], [1.66602168E12, 662.8273584454139], [1.66602174E12, 658.020781567652]], "isOverall": false, "label": "商品秒杀", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6660218E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66602162E12, "maxY": 522.6883405925435, "series": [{"data": [[1.66602162E12, 362.4302179494178], [1.6660218E12, 0.0], [1.66602168E12, 71.09517271282003], [1.66602174E12, 103.29109017981902]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[1.66602162E12, 509.1285673919187], [1.66602168E12, 522.6883405925435], [1.66602174E12, 384.7197650779318]], "isOverall": false, "label": "商品秒杀", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6660218E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2.4837524724498428, "minX": 1.66602162E12, "maxY": 12936.733944954127, "series": [{"data": [[1.66602162E12, 4.839023324411414], [1.6660218E12, 12936.733944954127], [1.66602168E12, 62.85804788745966], [1.66602174E12, 200.7573121817111]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[1.66602162E12, 2.4837524724498428], [1.66602168E12, 58.66314076484945], [1.66602174E12, 111.56340637000233]], "isOverall": false, "label": "商品秒杀", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6660218E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66602162E12, "maxY": 20444.0, "series": [{"data": [[1.66602162E12, 3641.0], [1.66602168E12, 20444.0], [1.66602174E12, 8095.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66602162E12, 893.0], [1.66602168E12, 616.0], [1.66602174E12, 560.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66602162E12, 2529.800000000032], [1.66602168E12, 4676.840000000026], [1.66602174E12, 3744.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66602162E12, 1000.0], [1.66602168E12, 839.9500000000007], [1.66602174E12, 994.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66602162E12, 0.0], [1.66602168E12, 0.0], [1.66602174E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66602162E12, 529.0], [1.66602168E12, 240.0], [1.66602174E12, 176.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66602174E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 4.0, "maxY": 112811.0, "series": [{"data": [[97.0, 14767.0], [193.0, 359.0], [303.0, 15.0], [346.0, 18616.5], [338.0, 18375.5], [385.0, 1599.5], [415.0, 120.5], [501.0, 190.0], [622.0, 97.0], [957.0, 153.0], [942.0, 247.5], [932.0, 134.0], [990.0, 146.0], [968.0, 5627.5], [999.0, 192.0], [1003.0, 195.0], [1023.0, 115.0], [1085.0, 173.0], [1135.0, 725.5], [1126.0, 141.0], [1100.0, 4618.5], [1096.0, 1157.5], [1183.0, 3897.0], [1185.0, 44.0], [1217.0, 416.0], [1259.0, 90.0], [1216.0, 3938.0], [1250.0, 3.0], [1316.0, 133.0], [1341.0, 92.0], [1293.0, 203.0], [1333.0, 1880.0], [1291.0, 2995.5], [1404.0, 498.0], [1386.0, 446.0], [1395.0, 485.0], [1388.0, 414.0], [1359.0, 522.0], [1403.0, 506.0], [1355.0, 551.0], [1362.0, 502.0], [1407.0, 533.0], [1381.0, 852.5], [1391.0, 286.0], [1413.0, 513.0], [1470.0, 2065.0], [1417.0, 113.0], [1451.0, 6440.5], [1419.0, 12002.0], [1465.0, 3289.0], [1460.0, 230.0], [1427.0, 202.0], [1489.0, 678.0], [1509.0, 193.0], [1510.0, 352.0], [1514.0, 5923.5], [1538.0, 183.0], [1554.0, 87.0], [1557.0, 71.0], [1590.0, 345.0], [1576.0, 3834.0], [1582.0, 221.0], [1559.0, 214.0], [1558.0, 12198.0], [1547.0, 122.0], [1596.0, 55.0], [1572.0, 69.5], [1585.0, 157.0], [1634.0, 15658.0], [1637.0, 566.5], [1659.0, 468.0], [1611.0, 1293.0], [1645.0, 3724.0], [1642.0, 93.0], [1636.0, 10733.0], [1639.0, 278.0], [1627.0, 350.5], [1621.0, 77.0], [1675.0, 8875.0], [1684.0, 85.0], [1711.0, 5826.0], [1700.0, 11994.0], [1707.0, 13282.0], [1706.0, 14293.0], [1672.0, 15045.0], [1690.0, 128.0], [1712.0, 224.0], [1752.0, 230.0], [1744.0, 3202.5], [1737.0, 7188.0], [1740.0, 8039.5], [1777.0, 196.0], [1743.0, 218.5], [1810.0, 126.5], [1906.0, 491.0], [1912.0, 250.0], [1983.0, 501.0], [1979.0, 495.0], [2003.0, 506.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[622.0, 35222.0], [957.0, 521.0], [932.0, 530.0], [990.0, 23.0], [968.0, 300.5], [1023.0, 1655.0], [4.0, 13854.5], [1135.0, 85.0], [1100.0, 257.0], [1096.0, 96.0], [1183.0, 210.5], [1217.0, 4123.0], [1216.0, 237.0], [1232.0, 211.0], [1316.0, 3084.0], [1341.0, 178.0], [1333.0, 74.0], [1291.0, 135.0], [1381.0, 20.0], [1388.0, 32.0], [1470.0, 23.0], [1417.0, 20.0], [1451.0, 89.0], [1454.0, 89.0], [1419.0, 89.0], [1465.0, 151.5], [1427.0, 12.0], [1489.0, 17.0], [1509.0, 49.0], [1514.0, 78.0], [1487.0, 87.0], [1496.0, 86.0], [1538.0, 16679.0], [1554.0, 976.0], [1590.0, 12.0], [1576.0, 66.0], [1582.0, 986.0], [1559.0, 80.0], [1561.0, 82.0], [1558.0, 83.0], [1557.0, 39872.0], [1547.0, 15.5], [1585.0, 35.0], [1636.0, 101.0], [1642.0, 32.0], [1645.0, 28.0], [1634.0, 143.0], [1611.0, 68.0], [1640.0, 145.0], [1637.0, 147.0], [1639.0, 1656.0], [1627.0, 39.0], [1621.0, 1038.0], [1711.0, 35.0], [1675.0, 96.0], [1700.0, 98.0], [1707.0, 101.0], [1706.0, 108.0], [1672.0, 128.0], [1690.0, 8657.0], [1712.0, 970.0], [1744.0, 20.0], [1737.0, 43.0], [1740.0, 78.0], [1777.0, 1677.0], [1743.0, 2827.0], [1810.0, 2915.5], [1912.0, 16691.0], [16.0, 4918.0], [97.0, 83.5], [109.0, 112811.0], [166.0, 302.5], [250.0, 67050.0], [346.0, 158.0], [385.0, 97.0], [415.0, 11755.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2003.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 18615.0, "series": [{"data": [[97.0, 14767.0], [193.0, 359.0], [303.0, 13.0], [346.0, 18615.0], [338.0, 18375.5], [385.0, 1598.0], [415.0, 120.5], [501.0, 190.0], [622.0, 97.0], [957.0, 153.0], [942.0, 247.5], [932.0, 134.0], [990.0, 146.0], [968.0, 5623.5], [999.0, 192.0], [1003.0, 195.0], [1023.0, 115.0], [1085.0, 173.0], [1135.0, 725.5], [1126.0, 141.0], [1100.0, 4609.5], [1096.0, 1155.5], [1183.0, 3887.0], [1185.0, 44.0], [1217.0, 416.0], [1259.0, 89.0], [1216.0, 3936.0], [1250.0, 3.0], [1316.0, 133.0], [1341.0, 92.0], [1293.0, 203.0], [1333.0, 1869.5], [1291.0, 2995.0], [1404.0, 498.0], [1386.0, 446.0], [1395.0, 485.0], [1388.0, 414.0], [1359.0, 522.0], [1403.0, 506.0], [1355.0, 551.0], [1362.0, 502.0], [1407.0, 533.0], [1381.0, 852.5], [1391.0, 286.0], [1413.0, 513.0], [1470.0, 2039.0], [1417.0, 113.0], [1451.0, 6438.0], [1419.0, 11987.0], [1465.0, 3289.0], [1460.0, 230.0], [1427.0, 202.0], [1489.0, 678.0], [1509.0, 193.0], [1510.0, 352.0], [1514.0, 5918.0], [1538.0, 183.0], [1554.0, 87.0], [1557.0, 71.0], [1590.0, 345.0], [1576.0, 3833.0], [1582.0, 221.0], [1559.0, 214.0], [1558.0, 12196.5], [1547.0, 122.0], [1596.0, 55.0], [1572.0, 69.5], [1585.0, 157.0], [1634.0, 15655.0], [1637.0, 566.5], [1659.0, 468.0], [1611.0, 1283.0], [1645.0, 3702.5], [1642.0, 93.0], [1636.0, 10714.0], [1639.0, 278.0], [1627.0, 350.5], [1621.0, 77.0], [1675.0, 8867.5], [1684.0, 85.0], [1711.0, 5818.0], [1700.0, 11982.0], [1707.0, 13282.0], [1706.0, 14280.0], [1672.0, 15021.0], [1690.0, 128.0], [1712.0, 224.0], [1752.0, 230.0], [1744.0, 3202.5], [1737.0, 7157.5], [1740.0, 8026.5], [1777.0, 196.0], [1743.0, 218.5], [1810.0, 126.5], [1906.0, 491.0], [1912.0, 250.0], [1983.0, 501.0], [1979.0, 495.0], [2003.0, 506.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[622.0, 0.0], [957.0, 0.0], [932.0, 0.0], [990.0, 0.0], [968.0, 0.0], [1023.0, 0.0], [4.0, 0.0], [1135.0, 0.0], [1100.0, 0.0], [1096.0, 0.0], [1183.0, 0.0], [1217.0, 0.0], [1216.0, 0.0], [1232.0, 0.0], [1316.0, 0.0], [1341.0, 0.0], [1333.0, 0.0], [1291.0, 0.0], [1381.0, 0.0], [1388.0, 0.0], [1470.0, 0.0], [1417.0, 0.0], [1451.0, 0.0], [1454.0, 0.0], [1419.0, 0.0], [1465.0, 0.0], [1427.0, 0.0], [1489.0, 0.0], [1509.0, 0.0], [1514.0, 0.0], [1487.0, 0.0], [1496.0, 0.0], [1538.0, 0.0], [1554.0, 0.0], [1590.0, 0.0], [1576.0, 0.0], [1582.0, 0.0], [1559.0, 0.0], [1561.0, 0.0], [1558.0, 0.0], [1557.0, 0.0], [1547.0, 0.0], [1585.0, 0.0], [1636.0, 0.0], [1642.0, 0.0], [1645.0, 0.0], [1634.0, 0.0], [1611.0, 0.0], [1640.0, 0.0], [1637.0, 0.0], [1639.0, 0.0], [1627.0, 0.0], [1621.0, 0.0], [1711.0, 0.0], [1675.0, 0.0], [1700.0, 0.0], [1707.0, 0.0], [1706.0, 0.0], [1672.0, 0.0], [1690.0, 0.0], [1712.0, 0.0], [1744.0, 0.0], [1737.0, 0.0], [1740.0, 0.0], [1777.0, 0.0], [1743.0, 0.0], [1810.0, 0.0], [1912.0, 0.0], [16.0, 0.0], [97.0, 0.0], [109.0, 0.0], [166.0, 0.0], [250.0, 0.0], [346.0, 0.0], [385.0, 0.0], [415.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2003.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 613.35, "minX": 1.66602162E12, "maxY": 1388.25, "series": [{"data": [[1.66602162E12, 613.35], [1.66602168E12, 1388.25], [1.66602174E12, 727.3166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66602174E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.66602162E12, "maxY": 817.6, "series": [{"data": [[1.66602162E12, 528.8], [1.66602168E12, 533.15], [1.66602174E12, 499.8666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.66602162E12, 70.98333333333333], [1.66602168E12, 817.6], [1.66602174E12, 212.35]], "isOverall": false, "label": "Non HTTP response code: java.net.NoRouteToHostException", "isController": false}, {"data": [[1.66602162E12, 0.25], [1.6660218E12, 1.8166666666666667], [1.66602168E12, 37.583333333333336], [1.66602174E12, 26.516666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6660218E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.8166666666666667, "minX": 1.66602162E12, "maxY": 441.8, "series": [{"data": [[1.66602162E12, 269.1], [1.66602168E12, 250.1], [1.66602174E12, 240.93333333333334]], "isOverall": false, "label": "商品列表-success", "isController": false}, {"data": [[1.66602162E12, 36.016666666666666], [1.6660218E12, 1.8166666666666667], [1.66602168E12, 441.8], [1.66602174E12, 128.88333333333333]], "isOverall": false, "label": "商品列表-failure", "isController": false}, {"data": [[1.66602162E12, 259.7], [1.66602168E12, 283.05], [1.66602174E12, 258.93333333333334]], "isOverall": false, "label": "商品秒杀-success", "isController": false}, {"data": [[1.66602162E12, 35.21666666666667], [1.66602168E12, 413.3833333333333], [1.66602174E12, 109.98333333333333]], "isOverall": false, "label": "商品秒杀-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6660218E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.8166666666666667, "minX": 1.66602162E12, "maxY": 855.1833333333333, "series": [{"data": [[1.66602162E12, 528.8], [1.66602168E12, 533.15], [1.66602174E12, 499.8666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66602162E12, 71.23333333333333], [1.6660218E12, 1.8166666666666667], [1.66602168E12, 855.1833333333333], [1.66602174E12, 238.86666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6660218E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

